using System;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using SWIBLL;
using SWIBLL.Models;
using DXSWI.Forms;
using DevExpress.XtraEditors;

namespace DXSWI.Modules
{
    public partial class frCandidates : DevExpress.XtraEditors.XtraUserControl
    {
        public frCandidates()
        {
            InitializeComponent();
            init();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //sqlDataSource1.Fill();
        }

        private async void init()
        {
            try {
                // load data in candidate table and show in grid control
                gcCandidates.DataSource = await CandidateManager.GetAllCandidatesOverViewAsync();
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void gcCandidates_Click(object sender, EventArgs e)
        {
            
        }

        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (e.FocusedRowHandle == DevExpress.XtraGrid.GridControl.AutoFilterRowHandle)
                gvCandidates.FocusedColumn = colFirstName;
            else if (e.FocusedRowHandle >= 0)
                gvCandidates.FocusedColumn = null;
            updateCurrentCandidate();

        }

        private void gridView1_ColumnFilterChanged(object sender, EventArgs e)
        {

        }
        void updateCurrentCandidate()
        {
            //frCandidates.
            if (gcCandidates.MainView == gvCandidates)
                gvCandidates.MakeRowVisible(gvCandidates.FocusedRowHandle);
            ////get current selection object
            //if (gridView1.SelectedRowsCount > 0)
            //{
            //    int row = gridView1.GetSelectedRows().First();
            //    DataRow data_row = gridView1.GetDataRow(row); // for test
            //    long canID = Convert.ToInt64(data_row["CandidateId"].ToString());
            //    ucCandidateManager1.setCurrentCandidate(canID,"");
            //}
        }

        private void ucCandidateManager1_Load(object sender, EventArgs e)
        {

        }

        public long currentCandidateId()
        {
            if (gvCandidates.SelectedRowsCount > 0)
            {
                int row = gvCandidates.GetSelectedRows().First();
                return Convert.ToInt64(gvCandidates.GetDataRow(row)["CandidateId"].ToString());
            }
            return -1;
        }

        public void updateData()
        {
            init();
            updateCurrentCandidate();
        }

        public void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dlgCandidateEdit dlg = new dlgCandidateEdit(-1, null);
            dlg.emitUpdateData += updateData;
            dlg.ShowDialog();
        }

        public void editToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (currentCandidateId() == -1) return;
            dlgCandidateEdit dlg = new dlgCandidateEdit(currentCandidateId(), null);
            dlg.emitUpdateData += updateData;
            dlg.ShowDialog();
        }

        public void deleteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (currentCandidateId() == -1) return;
            if (XtraMessageBox.Show("Are you sure to delete?", "Notice", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                try {

                    CandidateManager.deleteCadidate(currentCandidateId());
                    updateData();
                } 
                catch (Exception ex)
                {
                    XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void refreshTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            updateData();
        }

        private void gcCandidates_DoubleClick(object sender, EventArgs e)
        {
            editToolStripMenuItem_Click(sender, e);
        }

        private void viewWebsiteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GotoSite();
        }

        public void GotoSite()
        {
            try
            {
                if (gvCandidates.SelectedRowsCount > 0)
                {
                    int row = gvCandidates.GetSelectedRows().First();
                    DataRow data_row = gvCandidates.GetDataRow(row);
                    string link = data_row["WebSite"].ToString();
                    if (!link.Contains("http"))
                    {
                        link = "https://" + link;
                    }
                    System.Diagnostics.Process.Start(link);
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}

